---
// Rich text renderer for Strapi blocks
export interface Block {
  type: string;
  children?: Child[];
  level?: number;
  format?: string;
  [key: string]: any;
}

export interface Child {
  type: string;
  text?: string;
  bold?: boolean;
  italic?: boolean;
  underline?: boolean;
  strikethrough?: boolean;
  code?: boolean;
  [key: string]: any;
}

interface Props {
  blocks?: Block[];
  className?: string;
}

const { blocks = [], className = "" } = Astro.props;

function renderChild(child: Child): string {
  if (!child.text) return "";
  
  let text = child.text;
  
  if (child.bold) text = `<strong>${text}</strong>`;
  if (child.italic) text = `<em>${text}</em>`;
  if (child.underline) text = `<u>${text}</u>`;
  if (child.strikethrough) text = `<s>${text}</s>`;
  if (child.code) text = `<code>${text}</code>`;
  
  return text;
}

function renderBlock(block: Block): string {
  if (!block.children) return "";
  
  const content = block.children.map(renderChild).join("");
  
  switch (block.type) {
    case "paragraph":
      return `<p>${content}</p>`;
    case "heading":
      const level = block.level || 1;
      return `<h${level}>${content}</h${level}>`;
    case "list":
      const listType = block.format === "ordered" ? "ol" : "ul";
      return `<${listType}>${content}</${listType}>`;
    case "list-item":
      return `<li>${content}</li>`;
    case "quote":
      return `<blockquote>${content}</blockquote>`;
    case "code":
      return `<pre><code>${content}</code></pre>`;
    default:
      return `<p>${content}</p>`;
  }
}

const renderedContent = blocks.map(renderBlock).join("");
---

<div class={className} set:html={renderedContent} />

<style>
  /* Default styles for rich text content */
  :global(.rich-text p) {
    margin-bottom: 1rem;
  }
  
  :global(.rich-text h1),
  :global(.rich-text h2),
  :global(.rich-text h3),
  :global(.rich-text h4),
  :global(.rich-text h5),
  :global(.rich-text h6) {
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    font-weight: 600;
  }
  
  :global(.rich-text h1) { font-size: 2rem; }
  :global(.rich-text h2) { font-size: 1.75rem; }
  :global(.rich-text h3) { font-size: 1.5rem; }
  :global(.rich-text h4) { font-size: 1.25rem; }
  :global(.rich-text h5) { font-size: 1.125rem; }
  :global(.rich-text h6) { font-size: 1rem; }
  
  :global(.rich-text ul),
  :global(.rich-text ol) {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
  }
  
  :global(.rich-text li) {
    margin-bottom: 0.5rem;
  }
  
  :global(.rich-text blockquote) {
    border-left: 4px solid #e5e7eb;
    padding-left: 1rem;
    margin: 1rem 0;
    font-style: italic;
  }
  
  :global(.rich-text code) {
    background-color: #f3f4f6;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-family: ui-monospace, SFMono-Regular, "SF Mono", Consolas, "Liberation Mono", Menlo, monospace;
  }
  
  :global(.rich-text pre) {
    background-color: #f3f4f6;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
  }
  
  :global(.rich-text pre code) {
    background-color: transparent;
    padding: 0;
  }
</style>
